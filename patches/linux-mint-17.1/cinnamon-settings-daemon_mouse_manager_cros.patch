diff -ruN cinnamon-settings-daemon-2.4.3+rebecca/plugins/mouse/csd-mouse-manager.c cinnamon-settings-daemon-2.4.3+rebecca.new/plugins/mouse/csd-mouse-manager.c
--- cinnamon-settings-daemon-2.4.3+rebecca/plugins/mouse/csd-mouse-manager.c	2014-11-10 02:52:06.000000000 -0700
+++ cinnamon-settings-daemon-2.4.3+rebecca.new/plugins/mouse/csd-mouse-manager.c	2015-03-21 20:02:36.390929972 -0600
@@ -308,35 +308,6 @@
         return FALSE;
 }
 
-static gboolean
-touchpad_has_single_button (XDevice *device)
-{
-        Atom type, prop;
-        int format;
-        unsigned long nitems, bytes_after;
-        unsigned char *data;
-        gboolean is_single_button = FALSE;
-        int rc;
-
-        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Capabilities", False);
-        if (!prop)
-                return FALSE;
-
-        gdk_error_trap_push ();
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), device, prop, 0, 1, False,
-                                XA_INTEGER, &type, &format, &nitems,
-                                &bytes_after, &data);
-        if (rc == Success && type == XA_INTEGER && format == 8 && nitems >= 3)
-                is_single_button = (data[0] == 1 && data[1] == 0 && data[2] == 0);
-
-        if (rc == Success)
-                XFree (data);
-
-        gdk_error_trap_pop_ignored ();
-
-        return is_single_button;
-}
-
 static int
 touchpad_num_fingers_supported (XDevice *device)
 {
@@ -344,10 +315,10 @@
         int format;
         unsigned long nitems, bytes_after;
         unsigned char *data;
-        int num_fingers = 1;
+        int num_fingers = 2;
         int rc;
 
-        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Capabilities", False);
+        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Three Finger Click Enable", False);
         if (!prop)
                 return FALSE;
 
@@ -355,11 +326,8 @@
         rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), device, prop, 0, 1, False,
                                 XA_INTEGER, &type, &format, &nitems,
                                 &bytes_after, &data);
-        if (rc == Success && type == XA_INTEGER && format == 8 && nitems >= 5) {
-            if (data[3] == 1) {
-                num_fingers = 2;
-            }
-            if (data[4] == 1) {
+        if (rc == Success && type == XA_INTEGER && format == 8 && nitems == 1) {
+            if (data[0] == 1) {
                 num_fingers = 3;
             }
         }
@@ -397,18 +365,7 @@
 
         /* If the device is a touchpad, swap tap buttons
          * around too, otherwise a tap would be a right-click */
-        if (device_is_touchpad (xdevice)) {
-                gboolean tap = g_settings_get_boolean (manager->priv->touchpad_settings, KEY_TAP_TO_CLICK);
-                gboolean single_button = touchpad_has_single_button (xdevice);
-
-                left_handed = touchpad_left_handed;
-
-                if (tap && !single_button)
-                        set_tap_to_click (device, tap, left_handed);
-
-                if (single_button)
-                        goto out;
-        } else {
+        if (!device_is_touchpad (xdevice)) {
                 left_handed = mouse_left_handed;
         }
 
@@ -442,14 +399,17 @@
             GdkDevice       *device)
 {
         XDevice *xdevice;
-        XPtrFeedbackControl feedback;
-        XFeedbackState *states, *state;
-        int num_feedbacks;
-        int numerator, denominator;
-        gfloat motion_acceleration;
         int motion_threshold;
         GSettings *settings;
-        guint i;
+        Atom prop, type;
+        unsigned long nitems, bytes_after;
+        unsigned char *data;
+        int rc;
+        int format;
+
+        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Pointer Sensitivity", False);
+        if (!prop)
+                return;
 
         xdevice = open_gdk_device (device);
         if (xdevice == NULL)
@@ -462,68 +422,29 @@
         else
                 settings = manager->priv->mouse_settings;
 
-        /* Calculate acceleration */
-        motion_acceleration = g_settings_get_double (settings, KEY_MOTION_ACCELERATION);
-
-        if (motion_acceleration >= 1.0) {
-                /* we want to get the acceleration, with a resolution of 0.5
-                 */
-                if ((motion_acceleration - floor (motion_acceleration)) < 0.25) {
-                        numerator = floor (motion_acceleration);
-                        denominator = 1;
-                } else if ((motion_acceleration - floor (motion_acceleration)) < 0.5) {
-                        numerator = ceil (2.0 * motion_acceleration);
-                        denominator = 2;
-                } else if ((motion_acceleration - floor (motion_acceleration)) < 0.75) {
-                        numerator = floor (2.0 *motion_acceleration);
-                        denominator = 2;
-                } else {
-                        numerator = ceil (motion_acceleration);
-                        denominator = 1;
-                }
-        } else if (motion_acceleration < 1.0 && motion_acceleration > 0) {
-                /* This we do to 1/10ths */
-                numerator = floor (motion_acceleration * 10) + 1;
-                denominator= 10;
-        } else {
-                numerator = -1;
-                denominator = -1;
-        }
-
         /* And threshold */
         motion_threshold = g_settings_get_int (settings, KEY_MOTION_THRESHOLD);
 
-        /* Get the list of feedbacks for the device */
-        states = XGetFeedbackControl (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, &num_feedbacks);
-        if (states == NULL)
-                goto out;
-        state = (XFeedbackState *) states;
-        for (i = 0; i < num_feedbacks; i++) {
-                if (state->class == PtrFeedbackClass) {
-                        /* And tell the device */
-                        feedback.class      = PtrFeedbackClass;
-                        feedback.length     = sizeof (XPtrFeedbackControl);
-                        feedback.id         = state->id;
-                        feedback.threshold  = motion_threshold;
-                        feedback.accelNum   = numerator;
-                        feedback.accelDenom = denominator;
-
-                        g_debug ("Setting accel %d/%d, threshold %d for device '%s'",
-                                 numerator, denominator, motion_threshold, gdk_device_get_name (device));
-
-                        XChangeFeedbackControl (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
-                                                xdevice,
-                                                DvAccelNum | DvAccelDenom | DvThreshold,
-                                                (XFeedbackControl *) &feedback);
+	g_debug ("setting pointer sensitivity on %s", gdk_device_get_name (device));
 
-                        break;
-                }
-                state = (XFeedbackState *) ((char *) state + state->length);
+        gdk_error_trap_push ();
+
+        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
+                            xdevice, prop, 0, 1, False, XA_INTEGER, &type, &format,
+                            &nitems, &bytes_after, &data);
+
+        if (rc == Success && format == 32 && type == XA_INTEGER && nitems == 1) {
+                data[0] = motion_threshold;
+
+                XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
+                                       xdevice, prop, type, format, PropModeReplace, data, nitems);
         }
 
-        XFreeFeedbackList (states);
+        if (rc == Success)
+                XFree (data);
 
-    out:
+        if (gdk_error_trap_pop ())
+                g_warning ("Error in setting pointer sensitivity on \"%s\"", gdk_device_get_name (device));
 
         XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
 }
@@ -662,7 +583,7 @@
 static void
 set_tap_to_click (GdkDevice *device,
                   gboolean   state,
-                  gboolean   left_handed)
+                  gboolean   mouse_left_handed)
 {
         int format, rc;
         unsigned long nitems, bytes_after;
@@ -670,7 +591,7 @@
         unsigned char* data;
         Atom prop, type;
 
-        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Tap Action", False);
+        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Tap Enable", False);
         if (!prop)
                 return;
 
@@ -685,20 +606,15 @@
 
 	g_debug ("setting tap to click on %s", gdk_device_get_name (device));
 
+	//First pause Taps 
+	usleep(100000);
         gdk_error_trap_push ();
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, prop, 0, 2,
+        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, prop, 0, 1,
                                  False, XA_INTEGER, &type, &format, &nitems,
                                  &bytes_after, &data);
 
-        if (rc == Success && type == XA_INTEGER && format == 8 && nitems >= 7) {
-               /* Set MR mapping for corner tapping on the right side*/
-               data[0] = (state) ? 2 : 0;
-               data[1] = (state) ? 3 : 0;
-
-                /* Set RLM mapping for 1/2/3 fingers*/
-                data[4] = (state) ? ((left_handed) ? 3 : 1) : 0;
-                data[5] = (state) ? ((left_handed) ? 1 : 3) : 0;
-                data[6] = (state) ? 2 : 0;
+        if (rc == Success && type == XA_INTEGER && format == 8 && nitems == 1) {
+                data[0] = state;
                 XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, prop, XA_INTEGER, 8,
                                        PropModeReplace, data, nitems);
         }
@@ -723,7 +639,7 @@
         unsigned char* data;
         Atom prop, type;
 
-        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Click Action", False);
+        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Three Finger Click Enable", False);
         if (!prop)
                 return;
 
@@ -736,17 +652,15 @@
                 return;
         }
 
-    g_debug ("setting click action to click on %s", gdk_device_get_name (device));
+        g_debug ("setting click action to click on %s", gdk_device_get_name (device));
 
         gdk_error_trap_push ();
         rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, prop, 0, 2,
                                  False, XA_INTEGER, &type, &format, &nitems,
                                  &bytes_after, &data);
 
-        if (rc == Success && type == XA_INTEGER && format == 8 && nitems >= 3) {
-            data[0] = 1;
-            data[1] = enable_two_finger_click;
-            data[2] = enable_three_finger_click;
+        if (rc == Success && type == XA_INTEGER && format == 8 && nitems >= 1) {
+            data[0] = enable_three_finger_click;
             XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, prop, XA_INTEGER, 8, PropModeReplace, data, nitems);
         }
 
@@ -760,135 +674,6 @@
 }
 
 static void
-set_horiz_scroll (GdkDevice *device,
-                  gboolean   state)
-{
-        int rc;
-        XDevice *xdevice;
-        Atom act_type, prop_edge, prop_twofinger;
-        int act_format;
-        unsigned long nitems, bytes_after;
-        unsigned char *data;
-
-        prop_edge = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Edge Scrolling", False);
-        prop_twofinger = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Two-Finger Scrolling", False);
-
-        if (!prop_edge || !prop_twofinger)
-                return;
-
-        xdevice = open_gdk_device (device);
-        if (xdevice == NULL)
-                return;
-
-        if (!device_is_touchpad (xdevice)) {
-                XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
-                return;
-        }
-
-	g_debug ("setting horiz scroll on %s", gdk_device_get_name (device));
-
-        gdk_error_trap_push ();
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 prop_edge, 0, 1, False,
-                                 XA_INTEGER, &act_type, &act_format, &nitems,
-                                 &bytes_after, &data);
-        if (rc == Success && act_type == XA_INTEGER &&
-            act_format == 8 && nitems >= 2) {
-                data[1] = (state && data[0]);
-                XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       prop_edge, XA_INTEGER, 8,
-                                       PropModeReplace, data, nitems);
-        }
-
-        XFree (data);
-
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 prop_twofinger, 0, 1, False,
-                                 XA_INTEGER, &act_type, &act_format, &nitems,
-                                 &bytes_after, &data);
-        if (rc == Success && act_type == XA_INTEGER &&
-            act_format == 8 && nitems >= 2) {
-                data[1] = (state && data[0]);
-                XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       prop_twofinger, XA_INTEGER, 8,
-                                       PropModeReplace, data, nitems);
-        }
-
-        if (gdk_error_trap_pop ())
-                g_warning ("Error in setting horiz scroll on \"%s\"", gdk_device_get_name (device));
-
-        if (rc == Success)
-                XFree (data);
-
-        XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
-
-}
-
-static void
-set_edge_scroll (GdkDevice               *device,
-                 CsdTouchpadScrollMethod  method)
-{
-        int rc;
-        XDevice *xdevice;
-        Atom act_type, prop_edge, prop_twofinger;
-        int act_format;
-        unsigned long nitems, bytes_after;
-        unsigned char *data;
-
-        prop_edge = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Edge Scrolling", False);
-        prop_twofinger = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Two-Finger Scrolling", False);
-
-        if (!prop_edge || !prop_twofinger)
-                return;
-
-        xdevice = open_gdk_device (device);
-        if (xdevice == NULL)
-                return;
-
-        if (!device_is_touchpad (xdevice)) {
-                XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
-                return;
-        }
-
-	g_debug ("setting edge scroll on %s", gdk_device_get_name (device));
-
-        gdk_error_trap_push ();
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 prop_edge, 0, 1, False,
-                                 XA_INTEGER, &act_type, &act_format, &nitems,
-                                 &bytes_after, &data);
-        if (rc == Success && act_type == XA_INTEGER &&
-            act_format == 8 && nitems >= 2) {
-                data[0] = (method == CSD_TOUCHPAD_SCROLL_METHOD_EDGE_SCROLLING) ? 1 : 0;
-                XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       prop_edge, XA_INTEGER, 8,
-                                       PropModeReplace, data, nitems);
-        }
-
-        XFree (data);
-
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 prop_twofinger, 0, 1, False,
-                                 XA_INTEGER, &act_type, &act_format, &nitems,
-                                 &bytes_after, &data);
-        if (rc == Success && act_type == XA_INTEGER &&
-            act_format == 8 && nitems >= 2) {
-                data[0] = (method == CSD_TOUCHPAD_SCROLL_METHOD_TWO_FINGER_SCROLLING) ? 1 : 0;
-                XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       prop_twofinger, XA_INTEGER, 8,
-                                       PropModeReplace, data, nitems);
-        }
-
-        if (gdk_error_trap_pop ())
-                g_warning ("Error in setting edge scroll on \"%s\"", gdk_device_get_name (device));
-
-        if (rc == Success)
-                XFree (data);
-
-        XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
-}
-
-static void
 set_touchpad_disabled (GdkDevice *device)
 {
         int id;
@@ -1050,8 +835,6 @@
 
         set_tap_to_click (device, g_settings_get_boolean (manager->priv->touchpad_settings, KEY_TAP_TO_CLICK), touchpad_left_handed);
         set_click_actions( device, g_settings_get_int (manager->priv->touchpad_settings, KEY_TWO_FINGER_CLICK), g_settings_get_int (manager->priv->touchpad_settings, KEY_THREE_FINGER_CLICK));
-        set_edge_scroll (device, g_settings_get_enum (manager->priv->touchpad_settings, KEY_SCROLL_METHOD));
-        set_horiz_scroll (device, g_settings_get_boolean (manager->priv->touchpad_settings, KEY_PAD_HORIZ_SCROLL));
         set_natural_scroll (manager, device, g_settings_get_boolean (manager->priv->touchpad_settings, KEY_NATURAL_SCROLL_ENABLED));
         if (g_settings_get_boolean (manager->priv->touchpad_settings, KEY_TOUCHPAD_ENABLED) == FALSE)
                 set_touchpad_disabled (device);
@@ -1063,11 +846,10 @@
                     gboolean         natural_scroll)
 {
         XDevice *xdevice;
-        Atom scrolling_distance, act_type;
+        Atom australian_scrolling, act_type;
         int rc, act_format;
         unsigned long nitems, bytes_after;
         unsigned char *data;
-        glong *ptr;
 
         xdevice = open_gdk_device (device);
         if (xdevice == NULL)
@@ -1082,28 +864,24 @@
                  natural_scroll ? "natural (reverse) scroll" : "normal scroll",
                  gdk_device_get_name (device));
 
-        scrolling_distance = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
-                                          "Synaptics Scrolling Distance", False);
+        australian_scrolling = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
+                                          "Australian Scrolling", False);
 
         gdk_error_trap_push ();
         rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 scrolling_distance, 0, 2, False,
+                                 australian_scrolling, 0, 1, False,
                                  XA_INTEGER, &act_type, &act_format, &nitems,
                                  &bytes_after, &data);
 
-        if (rc == Success && act_type == XA_INTEGER && act_format == 32 && nitems >= 2) {
-                ptr = (glong *) data;
-
+        if (rc == Success && act_type == XA_INTEGER && act_format == 8 && nitems >= 1) {
                 if (natural_scroll) {
-                        ptr[0] = -abs(ptr[0]);
-                        ptr[1] = -abs(ptr[1]);
+                        data[0] = 1;
                 } else {
-                        ptr[0] = abs(ptr[0]);
-                        ptr[1] = abs(ptr[1]);
+			data[0] = 0;
                 }
 
                 XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       scrolling_distance, XA_INTEGER, act_format,
+                                       australian_scrolling, XA_INTEGER, act_format,
                                        PropModeReplace, data, nitems);
         }
 
@@ -1184,11 +962,6 @@
                 }
                 else if (g_str_equal (key, KEY_TWO_FINGER_CLICK) || g_str_equal (key, KEY_THREE_FINGER_CLICK)) {
                         set_click_actions( device, g_settings_get_int (manager->priv->touchpad_settings, KEY_TWO_FINGER_CLICK), g_settings_get_int (manager->priv->touchpad_settings, KEY_THREE_FINGER_CLICK));
-                } else if (g_str_equal (key, KEY_SCROLL_METHOD)) {
-                        set_edge_scroll (device, g_settings_get_enum (settings, key));
-                        set_horiz_scroll (device, g_settings_get_boolean (settings, KEY_PAD_HORIZ_SCROLL));
-                } else if (g_str_equal (key, KEY_PAD_HORIZ_SCROLL)) {
-                        set_horiz_scroll (device, g_settings_get_boolean (settings, key));
                 } else if (g_str_equal (key, KEY_TOUCHPAD_ENABLED)) {
                         if (g_settings_get_boolean (settings, key) == FALSE)
                                 set_touchpad_disabled (device);
