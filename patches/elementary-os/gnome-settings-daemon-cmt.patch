diff --exclude '*Makefile*' -ruN gnome-settings-daemon-3.8.6.1/plugins/mouse/gsd-mouse-manager.c gnome-settings-daemon-3.8.6.2/plugins/mouse/gsd-mouse-manager.c
--- gnome-settings-daemon-3.8.6.1/plugins/mouse/gsd-mouse-manager.c	2015-02-05 14:07:23.000000000 -0500
+++ gnome-settings-daemon-3.8.6.2/plugins/mouse/gsd-mouse-manager.c	2015-04-15 16:30:32.000000000 -0400
@@ -88,8 +88,6 @@
         GHashTable *blacklist;
 
         gboolean mousetweaks_daemon_running;
-        gboolean syndaemon_spawned;
-        GPid syndaemon_pid;
         gboolean locate_pointer_spawned;
         GPid locate_pointer_pid;
 };
@@ -302,35 +300,6 @@
         return FALSE;
 }
 
-static gboolean
-touchpad_has_single_button (XDevice *device)
-{
-        Atom type, prop;
-        int format;
-        unsigned long nitems, bytes_after;
-        unsigned char *data;
-        gboolean is_single_button = FALSE;
-        int rc;
-
-        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Capabilities", False);
-        if (!prop)
-                return FALSE;
-
-        gdk_error_trap_push ();
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), device, prop, 0, 1, False,
-                                XA_INTEGER, &type, &format, &nitems,
-                                &bytes_after, &data);
-        if (rc == Success && type == XA_INTEGER && format == 8 && nitems >= 3)
-                is_single_button = (data[0] == 1 && data[1] == 0 && data[2] == 0);
-
-        if (rc == Success)
-                XFree (data);
-
-        gdk_error_trap_pop_ignored ();
-
-        return is_single_button;
-}
-
 static void
 set_left_handed (GsdMouseManager *manager,
                  GdkDevice       *device,
@@ -350,7 +319,7 @@
         if (xdevice == NULL)
                 return;
 
-	g_debug ("setting handedness on %s", gdk_device_get_name (device));
+        g_debug ("setting handedness on %s", gdk_device_get_name (device));
 
         buttons = g_new (guchar, buttons_capacity);
 
@@ -358,15 +327,13 @@
          * around too, otherwise a tap would be a right-click */
         if (device_is_touchpad (xdevice)) {
                 gboolean tap = g_settings_get_boolean (manager->priv->touchpad_settings, KEY_TAP_TO_CLICK);
-                gboolean single_button = touchpad_has_single_button (xdevice);
 
                 left_handed = touchpad_left_handed;
 
-                if (tap && !single_button)
+                if (tap)
                         set_tap_to_click (device, tap, left_handed);
 
-                if (single_button)
-                        goto out;
+//                goto out;
         } else {
                 left_handed = mouse_left_handed;
         }
@@ -387,7 +354,7 @@
 
         configure_button_layout (buttons, n_buttons, left_handed);
 
-	gdk_error_trap_push ();
+        gdk_error_trap_push ();
         XSetDeviceButtonMapping (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, buttons, n_buttons);
         gdk_error_trap_pop_ignored ();
 
@@ -401,14 +368,17 @@
             GdkDevice       *device)
 {
         XDevice *xdevice;
-        XPtrFeedbackControl feedback;
-        XFeedbackState *states, *state;
-        int num_feedbacks;
-        int numerator, denominator;
-        gfloat motion_acceleration;
         int motion_threshold;
         GSettings *settings;
-        guint i;
+        Atom prop, type;
+        unsigned long nitems, bytes_after;
+        unsigned char *data;
+        int rc;
+        int format;
+
+        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Pointer Sensitivity", False);
+        if (!prop)
+                return;
 
         xdevice = open_gdk_device (device);
         if (xdevice == NULL)
@@ -421,203 +391,31 @@
         else
                 settings = manager->priv->mouse_settings;
 
-        /* Calculate acceleration */
-        motion_acceleration = g_settings_get_double (settings, KEY_MOTION_ACCELERATION);
-
-        if (motion_acceleration >= 1.0) {
-                /* we want to get the acceleration, with a resolution of 0.5
-                 */
-                if ((motion_acceleration - floor (motion_acceleration)) < 0.25) {
-                        numerator = floor (motion_acceleration);
-                        denominator = 1;
-                } else if ((motion_acceleration - floor (motion_acceleration)) < 0.5) {
-                        numerator = ceil (2.0 * motion_acceleration);
-                        denominator = 2;
-                } else if ((motion_acceleration - floor (motion_acceleration)) < 0.75) {
-                        numerator = floor (2.0 *motion_acceleration);
-                        denominator = 2;
-                } else {
-                        numerator = ceil (motion_acceleration);
-                        denominator = 1;
-                }
-        } else if (motion_acceleration < 1.0 && motion_acceleration > 0) {
-                /* This we do to 1/10ths */
-                numerator = floor (motion_acceleration * 10) + 1;
-                denominator= 10;
-        } else {
-                numerator = -1;
-                denominator = -1;
-        }
-
         /* And threshold */
         motion_threshold = g_settings_get_int (settings, KEY_MOTION_THRESHOLD);
-
-        /* Get the list of feedbacks for the device */
-        states = XGetFeedbackControl (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, &num_feedbacks);
-        if (states == NULL)
-                goto out;
-        state = (XFeedbackState *) states;
-        for (i = 0; i < num_feedbacks; i++) {
-                if (state->class == PtrFeedbackClass) {
-                        /* And tell the device */
-                        feedback.class      = PtrFeedbackClass;
-                        feedback.length     = sizeof (XPtrFeedbackControl);
-                        feedback.id         = state->id;
-                        feedback.threshold  = motion_threshold;
-                        feedback.accelNum   = numerator;
-                        feedback.accelDenom = denominator;
-
-                        g_debug ("Setting accel %d/%d, threshold %d for device '%s'",
-                                 numerator, denominator, motion_threshold, gdk_device_get_name (device));
-
-                        XChangeFeedbackControl (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
-                                                xdevice,
-                                                DvAccelNum | DvAccelDenom | DvThreshold,
-                                                (XFeedbackControl *) &feedback);
-
-                        break;
-                }
-                state = (XFeedbackState *) ((char *) state + state->length);
-        }
-
-        XFreeFeedbackList (states);
-
-    out:
-
-        XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
-}
-
-static void
-set_middle_button (GsdMouseManager *manager,
-                   GdkDevice       *device,
-                   gboolean         middle_button)
-{
-        Atom prop;
-        XDevice *xdevice;
-        Atom type;
-        int format;
-        unsigned long nitems, bytes_after;
-        unsigned char *data;
-        int rc;
-
-        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
-                            "Evdev Middle Button Emulation", True);
-
-        if (!prop) /* no evdev devices */
-                return;
-
-        xdevice = open_gdk_device (device);
-        if (xdevice == NULL)
-                return;
-
-	g_debug ("setting middle button on %s", gdk_device_get_name (device));
-
+        g_debug ("setting pointer sensitivity on %s", gdk_device_get_name (device));
         gdk_error_trap_push ();
-
+        
         rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
-                            xdevice, prop, 0, 1, False, XA_INTEGER, &type, &format,
-                            &nitems, &bytes_after, &data);
-
-        if (rc == Success && format == 8 && type == XA_INTEGER && nitems == 1) {
-                data[0] = middle_button ? 1 : 0;
-
+                                 xdevice, prop, 0, 1, False, XA_INTEGER, &type, &format,
+                                 &nitems, &bytes_after, &data);
+        
+        if (rc == Success && format == 32 && type == XA_INTEGER && nitems == 1) {
+                data[0] = motion_threshold;
+                
                 XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
                                        xdevice, prop, type, format, PropModeReplace, data, nitems);
         }
-
-        if (gdk_error_trap_pop ())
-                g_warning ("Error in setting middle button emulation on \"%s\"", gdk_device_get_name (device));
-
+        
         if (rc == Success)
                 XFree (data);
 
+        if (gdk_error_trap_pop ())
+                g_warning ("Error in setting pointer sensitivity on \"%s\"", gdk_device_get_name (device));
+        
         XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
 }
 
-/* Ensure that syndaemon dies together with us, to avoid running several of
- * them */
-static void
-setup_syndaemon (gpointer user_data)
-{
-#ifdef __linux
-        prctl (PR_SET_PDEATHSIG, SIGHUP);
-#endif
-}
-
-static gboolean
-have_program_in_path (const char *name)
-{
-        gchar *path;
-        gboolean result;
-
-        path = g_find_program_in_path (name);
-        result = (path != NULL);
-        g_free (path);
-        return result;
-}
-
-static void
-syndaemon_died (GPid pid, gint status, gpointer user_data)
-{
-        GsdMouseManager *manager = GSD_MOUSE_MANAGER (user_data);
-
-        g_debug ("syndaemon stopped with status %i", status);
-        g_spawn_close_pid (pid);
-        manager->priv->syndaemon_spawned = FALSE;
-}
-
-static int
-set_disable_w_typing (GsdMouseManager *manager, gboolean state)
-{
-        if (state && touchpad_is_present ()) {
-                GError *error = NULL;
-                GPtrArray *args;
-
-                if (manager->priv->syndaemon_spawned)
-                        return 0;
-
-                if (!have_program_in_path ("syndaemon"))
-                        return 0;
-
-                args = g_ptr_array_new ();
-
-                g_ptr_array_add (args, "syndaemon");
-                g_ptr_array_add (args, "-i");
-                g_ptr_array_add (args, "1.0");
-                g_ptr_array_add (args, "-t");
-                g_ptr_array_add (args, "-K");
-                g_ptr_array_add (args, "-R");
-                g_ptr_array_add (args, NULL);
-
-                /* we must use G_SPAWN_DO_NOT_REAP_CHILD to avoid
-                 * double-forking, otherwise syndaemon will immediately get
-                 * killed again through (PR_SET_PDEATHSIG when the intermediate
-                 * process dies */
-                g_spawn_async (g_get_home_dir (), (char **) args->pdata, NULL,
-                                G_SPAWN_SEARCH_PATH|G_SPAWN_DO_NOT_REAP_CHILD, setup_syndaemon, NULL,
-                                &manager->priv->syndaemon_pid, &error);
-
-                manager->priv->syndaemon_spawned = (error == NULL);
-                g_ptr_array_free (args, FALSE);
-
-                if (error) {
-                        g_warning ("Failed to launch syndaemon: %s", error->message);
-                        g_settings_set_boolean (manager->priv->touchpad_settings, KEY_TOUCHPAD_DISABLE_W_TYPING, FALSE);
-                        g_error_free (error);
-                } else {
-                        g_child_watch_add (manager->priv->syndaemon_pid, syndaemon_died, manager);
-                        g_debug ("Launched syndaemon");
-                }
-        } else if (manager->priv->syndaemon_spawned) {
-                kill (manager->priv->syndaemon_pid, SIGHUP);
-                g_spawn_close_pid (manager->priv->syndaemon_pid);
-                manager->priv->syndaemon_spawned = FALSE;
-                g_debug ("Killed syndaemon");
-        }
-
-        return 0;
-}
-
 static void
 set_tap_to_click (GdkDevice *device,
                   gboolean   state,
@@ -629,7 +427,7 @@
         unsigned char* data;
         Atom prop, type;
 
-        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Tap Action", False);
+        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Tap Enable", False);
         if (!prop)
                 return;
 
@@ -643,21 +441,13 @@
         }
 
 	g_debug ("setting tap to click on %s", gdk_device_get_name (device));
-
         gdk_error_trap_push ();
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, prop, 0, 2,
+        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, prop, 0, 1,
                                  False, XA_INTEGER, &type, &format, &nitems,
                                  &bytes_after, &data);
 
-        if (rc == Success && type == XA_INTEGER && format == 8 && nitems >= 7) {
-               /* Set MR mapping for corner tapping on the right side*/
-               data[0] = (state) ? 2 : 0;
-               data[1] = (state) ? 3 : 0;
-
-                /* Set RLM mapping for 1/2/3 fingers*/
-                data[4] = (state) ? ((left_handed) ? 3 : 1) : 0;
-                data[5] = (state) ? ((left_handed) ? 1 : 3) : 0;
-                data[6] = 0; /* Disable three touch tap so gestures work */
+        if (rc == Success && type == XA_INTEGER && format == 8 && nitems == 1) {
+                data[0] = state;
                 XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice, prop, XA_INTEGER, 8,
                                        PropModeReplace, data, nitems);
         }
@@ -671,152 +461,6 @@
         XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
 }
 
-static void
-set_horiz_scroll (GdkDevice *device,
-                  gboolean   state)
-{
-        int rc;
-        XDevice *xdevice;
-        Atom act_type, prop_edge, prop_twofinger;
-        int act_format;
-        unsigned long nitems, bytes_after;
-        unsigned char *data;
-
-        prop_edge = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Edge Scrolling", False);
-        prop_twofinger = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Two-Finger Scrolling", False);
-
-        if (!prop_edge || !prop_twofinger)
-                return;
-
-        xdevice = open_gdk_device (device);
-        if (xdevice == NULL)
-                return;
-
-        if (!device_is_touchpad (xdevice)) {
-                XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
-                return;
-        }
-
-	g_debug ("setting horiz scroll on %s", gdk_device_get_name (device));
-
-        gdk_error_trap_push ();
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 prop_edge, 0, 1, False,
-                                 XA_INTEGER, &act_type, &act_format, &nitems,
-                                 &bytes_after, &data);
-        if (rc == Success && act_type == XA_INTEGER &&
-            act_format == 8 && nitems >= 2) {
-                data[1] = (state && data[0]);
-                XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       prop_edge, XA_INTEGER, 8,
-                                       PropModeReplace, data, nitems);
-        }
-
-        XFree (data);
-
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 prop_twofinger, 0, 1, False,
-                                 XA_INTEGER, &act_type, &act_format, &nitems,
-                                 &bytes_after, &data);
-        if (rc == Success && act_type == XA_INTEGER &&
-            act_format == 8 && nitems >= 2) {
-                data[1] = (state && data[0]);
-                XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       prop_twofinger, XA_INTEGER, 8,
-                                       PropModeReplace, data, nitems);
-        }
-
-        if (gdk_error_trap_pop ())
-                g_warning ("Error in setting horiz scroll on \"%s\"", gdk_device_get_name (device));
-
-        if (rc == Success)
-                XFree (data);
-
-        XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
-
-}
-
-static void
-set_scroll_method (GsdMouseManager         *manager,
-                   GdkDevice               *device,
-                   GsdTouchpadScrollMethod  method)
-{
-        int rc;
-        XDevice *xdevice;
-        Atom act_type, prop, prop_edge, prop_twofinger;
-        int act_format;
-        unsigned long nitems, bytes_after;
-        unsigned char *data;
-
-        prop = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Capabilities", True);
-        prop_edge = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Edge Scrolling", False);
-        prop_twofinger = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "Synaptics Two-Finger Scrolling", False);
-
-        if (!prop_edge || !prop_twofinger || !prop)
-                return;
-
-        xdevice = open_gdk_device (device);
-        if (xdevice == NULL)
-                return;
-
-        if (!device_is_touchpad (xdevice)) {
-                XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
-                return;
-        }
-
-	g_debug ("setting edge scroll on %s", gdk_device_get_name (device));
-
-        gdk_error_trap_push ();
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 prop, 0, 2, False,
-                                 XA_INTEGER, &act_type, &act_format, &nitems,
-                                 &bytes_after, &data);
-        if (rc == Success && act_type != None) {
-                if (!(data[3]) && method == GSD_TOUCHPAD_SCROLL_METHOD_TWO_FINGER_SCROLLING) {
-                        g_warning ("Two finger scroll is not supported by %s", gdk_device_get_name (device));
-                        method = GSD_TOUCHPAD_SCROLL_METHOD_EDGE_SCROLLING;
-                        g_settings_set_enum (manager->priv->touchpad_settings, KEY_SCROLL_METHOD, method);
-                }
-
-                XFree (data);
-        }
-
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 prop_edge, 0, 1, False,
-                                 XA_INTEGER, &act_type, &act_format, &nitems,
-                                 &bytes_after, &data);
-        if (rc == Success && act_type == XA_INTEGER &&
-            act_format == 8 && nitems >= 2) {
-                data[0] = (method == GSD_TOUCHPAD_SCROLL_METHOD_EDGE_SCROLLING) ? 1 : 0;
-                XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       prop_edge, XA_INTEGER, 8,
-                                       PropModeReplace, data, nitems);
-        }
-
-        XFree (data);
-
-        rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 prop_twofinger, 0, 1, False,
-                                 XA_INTEGER, &act_type, &act_format, &nitems,
-                                 &bytes_after, &data);
-        if (rc == Success && act_type == XA_INTEGER &&
-            act_format == 8 && nitems >= 2) {
-                data[0] = (method == GSD_TOUCHPAD_SCROLL_METHOD_TWO_FINGER_SCROLLING) ? 1 : 0;
-                XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       prop_twofinger, XA_INTEGER, 8,
-                                       PropModeReplace, data, nitems);
-        }
-
-        if (gdk_error_trap_pop ())
-                g_warning ("Error in setting edge scroll on \"%s\"", gdk_device_get_name (device));
-
-        if (rc == Success)
-                XFree (data);
-
-        XCloseDevice (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice);
-}
-
-static void
 set_touchpad_disabled (GdkDevice *device)
 {
         int id;
@@ -974,11 +618,8 @@
         set_left_handed (manager, device, mouse_left_handed, touchpad_left_handed);
 
         set_motion (manager, device);
-        set_middle_button (manager, device, g_settings_get_boolean (manager->priv->mouse_settings, KEY_MIDDLE_BUTTON_EMULATION));
 
         set_tap_to_click (device, g_settings_get_boolean (manager->priv->touchpad_settings, KEY_TAP_TO_CLICK), touchpad_left_handed);
-        set_scroll_method (manager, device, g_settings_get_enum (manager->priv->touchpad_settings, KEY_SCROLL_METHOD));
-        set_horiz_scroll (device, g_settings_get_boolean (manager->priv->touchpad_settings, KEY_PAD_HORIZ_SCROLL));
         set_natural_scroll (manager, device, g_settings_get_boolean (manager->priv->touchpad_settings, KEY_NATURAL_SCROLL_ENABLED));
         if (g_settings_get_boolean (manager->priv->touchpad_settings, KEY_TOUCHPAD_ENABLED) == FALSE)
                 set_touchpad_disabled (device);
@@ -990,11 +631,10 @@
                     gboolean         natural_scroll)
 {
         XDevice *xdevice;
-        Atom scrolling_distance, act_type;
+        Atom australian_scrolling, act_type;
         int rc, act_format;
         unsigned long nitems, bytes_after;
         unsigned char *data;
-        glong *ptr;
 
         xdevice = open_gdk_device (device);
         if (xdevice == NULL)
@@ -1009,28 +649,24 @@
                  natural_scroll ? "natural (reverse) scroll" : "normal scroll",
                  gdk_device_get_name (device));
 
-        scrolling_distance = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
-                                          "Synaptics Scrolling Distance", False);
+        australian_scrolling = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
+                                            "Australian Scrolling", False);
 
         gdk_error_trap_push ();
         rc = XGetDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                 scrolling_distance, 0, 2, False,
+                                 australian_scrolling, 0, 1, False,
                                  XA_INTEGER, &act_type, &act_format, &nitems,
                                  &bytes_after, &data);
 
-        if (rc == Success && act_type == XA_INTEGER && act_format == 32 && nitems >= 2) {
-                ptr = (glong *) data;
-
+        if (rc == Success && act_type == XA_INTEGER && act_format == 8 && nitems >= 1) {
                 if (natural_scroll) {
-                        ptr[0] = -abs(ptr[0]);
-                        ptr[1] = -abs(ptr[1]);
+                        data[0] = 1;
                 } else {
-                        ptr[0] = abs(ptr[0]);
-                        ptr[1] = abs(ptr[1]);
+                        data[0] = 0;
                 }
 
                 XChangeDeviceProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), xdevice,
-                                       scrolling_distance, XA_INTEGER, act_format,
+                                       australian_scrolling, XA_INTEGER, act_format,
                                        PropModeReplace, data, nitems);
         }
 
@@ -1078,8 +714,6 @@
                 } else if (g_str_equal (key, KEY_MOTION_ACCELERATION) ||
                            g_str_equal (key, KEY_MOTION_THRESHOLD)) {
                         set_motion (manager, device);
-                } else if (g_str_equal (key, KEY_MIDDLE_BUTTON_EMULATION)) {
-                        set_middle_button (manager, device, g_settings_get_boolean (settings, KEY_MIDDLE_BUTTON_EMULATION));
                 }
         }
         g_list_free (devices);
@@ -1092,11 +726,6 @@
 {
         GList *devices, *l;
 
-        if (g_str_equal (key, KEY_TOUCHPAD_DISABLE_W_TYPING)) {
-                set_disable_w_typing (manager, g_settings_get_boolean (manager->priv->touchpad_settings, key));
-                return;
-        }
-
         devices = gdk_device_manager_list_devices (manager->priv->device_manager, GDK_DEVICE_TYPE_SLAVE);
 
         for (l = devices; l != NULL; l = l->next) {
@@ -1110,11 +739,6 @@
                         mouse_left_handed = g_settings_get_boolean (manager->priv->mouse_settings, KEY_LEFT_HANDED);
                         set_tap_to_click (device, g_settings_get_boolean (settings, key),
                                           get_touchpad_handedness (manager, mouse_left_handed));
-                } else if (g_str_equal (key, KEY_SCROLL_METHOD)) {
-                        set_scroll_method (manager, device, g_settings_get_enum (settings, key));
-                        set_horiz_scroll (device, g_settings_get_boolean (settings, KEY_PAD_HORIZ_SCROLL));
-                } else if (g_str_equal (key, KEY_PAD_HORIZ_SCROLL)) {
-                        set_horiz_scroll (device, g_settings_get_boolean (settings, key));
                 } else if (g_str_equal (key, KEY_TOUCHPAD_ENABLED)) {
                         if (g_settings_get_boolean (settings, key) == FALSE)
                                 set_touchpad_disabled (device);
@@ -1169,8 +793,6 @@
                                              GINT_TO_POINTER (id), GINT_TO_POINTER (1));
                 }
 
-                /* If a touchpad was to appear... */
-                set_disable_w_typing (manager, g_settings_get_boolean (manager->priv->touchpad_settings, KEY_TOUCHPAD_DISABLE_W_TYPING));
         }
 }
 
@@ -1190,9 +812,6 @@
         if (device_is_ignored (manager, device) == FALSE) {
                 run_custom_command (device, COMMAND_DEVICE_REMOVED);
 
-                /* If a touchpad was to disappear... */
-                set_disable_w_typing (manager, g_settings_get_boolean (manager->priv->touchpad_settings, KEY_TOUCHPAD_DISABLE_W_TYPING));
-
                 ensure_touchpad_active (manager);
         }
 }
@@ -1239,13 +858,10 @@
         g_signal_connect (manager->priv->touchpad_settings, "changed",
                           G_CALLBACK (touchpad_callback), manager);
 
-        manager->priv->syndaemon_spawned = FALSE;
-
         set_locate_pointer (manager, g_settings_get_boolean (manager->priv->mouse_settings, KEY_LOCATE_POINTER));
         set_mousetweaks_daemon (manager,
                                 g_settings_get_boolean (manager->priv->mouse_a11y_settings, KEY_DWELL_CLICK_ENABLED),
                                 g_settings_get_boolean (manager->priv->mouse_a11y_settings, KEY_SECONDARY_CLICK_ENABLED));
-        set_disable_w_typing (manager, g_settings_get_boolean (manager->priv->touchpad_settings, KEY_TOUCHPAD_DISABLE_W_TYPING));
 
         devices = gdk_device_manager_list_devices (manager->priv->device_manager, GDK_DEVICE_TYPE_SLAVE);
         for (l = devices; l != NULL; l = l->next) {
